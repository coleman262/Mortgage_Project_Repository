#MSR and Loan cash flow / amortization schedule

import numpy as np
import numpy_financial as npf
import pandas as pd
import matplotlib.pyplot as plt



def calculate_payment(principal, rate, term):
    monthly_interest_rate = rate / 12
    total_payments = term
    monthly_payment = (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -total_payments)
    return monthly_payment

def loan_amortization_schedule(principal, rate, term, prepayment_percentage, service_fee):
    monthly_payment = calculate_payment(principal, rate, term)
    remaining_principal = principal
    amortization_schedule = []

    for month in range(1, term + 1):
        interest_payment = remaining_principal * (rate / 12)
        principal_payment = monthly_payment - interest_payment
        prepayment = remaining_principal * (1-(1-prepayment_percentage)**(1/12))
        total_payment = monthly_payment + prepayment
        remaining_principal -= (principal_payment + prepayment)
        serv_fee_cf = service_fee/12*(remaining_principal+(principal_payment + prepayment))
        ancillary_fee = (ancillary/12)*loan_count
        pandi_float = (pandi_flt/30)*flt_earn_rate/12*(interest_payment+prepayment+principal_payment)
        escrow_float = (escrow_bal_float*flt_earn_rate/12)*loan_count
        cost_to_service = (cts/12)*loan_count
        add_cts = additional_cts*del_loan_count
        int_on_escrow = int_escrow*escrow_bal_float/12
        interest_lost = prepayment*service_fee*(int_lost_days/30)
        if month == 1:
            setup_costs = 10*loan_count
        else:
            setup_costs = 0

        if np.any(interest_payment < .01):
            break
        begin_bal = (remaining_principal + principal_payment + prepayment)
        msr_cashflow = (serv_fee_cf + ancillary_fee + pandi_float + escrow_float) - (cost_to_service + add_cts + int_on_escrow + interest_lost + setup_costs)
        msr_cashflow_leverage = ((serv_fee_cf + ancillary_fee + pandi_float + escrow_float) - (cost_to_service + add_cts + int_on_escrow + interest_lost + setup_costs))/leverage
        disc_msr_cashflow = msr_cashflow / (1 + discount_rate / 12) ** month
        wtd_cashflow = disc_msr_cashflow * month

        amortization_schedule.append([month, total_payment, monthly_payment, prepayment, interest_payment, principal_payment,
                                      remaining_principal, serv_fee_cf, ancillary_fee, pandi_float, escrow_float, cost_to_service, add_cts,
                                      int_on_escrow, interest_lost, setup_costs, begin_bal, msr_cashflow, msr_cashflow_leverage, disc_msr_cashflow, wtd_cashflow])

        column_names = ['Month', 'total_payment', 'monthly_payment', 'Prepayment', 'Interest', 'Principal', 'End Balance',
                    'Service Fee', 'Ancillary',
                    'PandI Float', 'Escrow Float', 'CTS', 'Additional_CTS', 'Int Escrow', 'Int Lost', 'Setup Costs',
                    'Beginning Bal', 'Total Cash Flow', 'Total Cash Flow2',
                    'Disc MSR Cashflow', 'Wtd_Cashflow'
                    ]
    df = pd.DataFrame(amortization_schedule, columns = column_names)

#Uncomment and change path to export csv file
    df.to_csv("C:/Users/colem/msr_cash_flows.csv",
              columns=['Month', 'Beginning Bal', 'Principal', 'Interest', 'Prepayment', 'End Balance', 'Service Fee',
                       'Ancillary', 'PandI Float', 'Escrow Float', 'CTS', 'Additional_CTS', 'Setup Costs', 'Int Escrow', 'Int Lost',
                       'Total Cash Flow', 'Total Cash Flow2', 'Disc MSR Cashflow'], index=False)


#PX - IRR - Durations
    present_value = df['Disc MSR Cashflow'].sum()
    pv_format = f"Present value: ${present_value:,.0f}"
    print(pv_format)

    px = []
    loan_price = price * -principal
    px.append(loan_price)
    px.extend(df['Total Cash Flow'])
    irr = npf.irr(px)*12
    print("ROA: {:.2%}".format(irr))

    px2= []
    loan_price = price * -principal
    px2.append(loan_price)
    px2.extend(df['Total Cash Flow2'])
    irr2 = npf.irr(px2)*12
    print("ROE: {:.2%}".format(irr2))


    macaulay_duration = ((df['Wtd_Cashflow']/(loan_price*-1)).sum())/12
    print(f"Macaulay Duration: {macaulay_duration:.3}")
    mod_duration = macaulay_duration/(1+irr)
    print(f"Modified Duration: {mod_duration:.3}")

    return amortization_schedule


#Plot is loan amortization including prepayments only
def plot_loan_amortization_schedule(amortization_schedule):
    months = [entry[0] for entry in amortization_schedule]
    remaining_principal = [entry[6] for entry in amortization_schedule]

    plt.figure(figsize=(10, 6))
    plt.plot(months, remaining_principal, color='b', linewidth=2, label='Remaining Principal')
    plt.xlabel('Months')
    plt.ylabel('Loan Balance ($)')
    plt.title('Mortgage Loan Amortization Schedule with Prepayment')
    plt.legend()
    plt.grid(True)
    plt.show()


#Loan variables / assumptions
principal = 1000000000
rate = .075
term = 360
prepayment_percentage = 0.05#p.array([0.05])   Prepayment expressed as a percentage of the remaining principal
service_fee = .0025
ancillary = 10
pandi_flt = 13
flt_earn_rate = .03
escrow_bal_float = 1600
cts = 65
additional_cts = 10
int_escrow = .01
int_lost_days = 10
mult = 5.0
price = service_fee*mult
discount_rate = .10
leverage = .7
loan_count = 2800
del_loan_count = 56

amortization_schedule = loan_amortization_schedule(principal, rate, term, prepayment_percentage, service_fee)
plot_loan_amortization_schedule(amortization_schedule)

