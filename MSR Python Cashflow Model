#MSR and Loan cash flow / amortization schedule

import numpy as np
import numpy_financial as npf
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
from scipy.optimize import root_scalar

#Loan variables / Assumptions
principal = 500000
rate = .06
term = 360
prepayment_percentage = 0.04   #Prepayment expressed as a percentage of the remaining principal
service_fee = .0025
ancillary = 10
pandi_flt = 20

flt_earn_rate = .03
escrow_bal_float = 1600
cts = 70
additional_cts = 50
setup_cost = 10
int_escrow = .01
int_lost_days = 10
mult = 4.75
price = service_fee*mult


discount_rate = .10
leverage = .70
loan_count = 1
del_loan_count = 0
financing_costs = .07


def calculate_payment(principal, rate, term):
    monthly_interest_rate = rate / 12
    total_payments = term
    monthly_payment = (principal * monthly_interest_rate) / (1 - (1 + monthly_interest_rate) ** -total_payments)
    return monthly_payment

def calculate_market_value(principal, rate, term, prepayment_percentage, service_fee, discount_rate):
    monthly_payment = calculate_payment(principal, rate, term)
    remaining_principal = principal
    market_value = 0

    for month in range(1, term + 1):
        interest_payment = remaining_principal * rate / 12
        principal_payment = monthly_payment - interest_payment
        prepayment = remaining_principal * (1 - (1 - prepayment_percentage)**(1/12))
        total_payment = monthly_payment + prepayment
        remaining_principal -= (principal_payment + prepayment)

        cash_flow = total_payment - service_fee * total_payment
        discounted_cash_flow = cash_flow / (1 + discount_rate / 12) ** month
        market_value += discounted_cash_flow

        if remaining_principal <= 0:
            break

    return market_value
    print(market_value)

def effective_duration_calculation(principal, rate, term, prepayment_percentage, service_fee, delta_y, discount_rate):
    V0 = calculate_market_value(principal, rate, term, prepayment_percentage, service_fee, discount_rate)
    V_plus = calculate_market_value(principal, rate + delta_y, term, prepayment_percentage, service_fee, discount_rate)
    V_minus = calculate_market_value(principal, rate - delta_y, term, prepayment_percentage, service_fee, discount_rate)
    effective_duration = (V_minus - V_plus) / (2 * V0 * delta_y) * -1
    return effective_duration




def loan_amortization_schedule(principal, rate, term, prepayment_percentage, service_fee):
    monthly_payment = calculate_payment(principal, rate, term)
    remaining_principal = principal
    amortization_schedule = []
    total_disc_msr_cashflow = 0

    for month in range(1, term + 1):
        interest_payment = remaining_principal * (rate / 12)
        principal_payment = monthly_payment - interest_payment
        prepayment = remaining_principal * (1-(1-prepayment_percentage)**(1/12))
        total_payment = monthly_payment + prepayment
        remaining_principal -= (principal_payment + prepayment)
        serv_fee_cf = service_fee/12*(remaining_principal+(principal_payment + prepayment))
        ancillary_fee = (ancillary/12)*loan_count
        pandi_float = (13 / 30) * flt_earn_rate / 12 * (interest_payment + prepayment + principal_payment)
        escrow_float = (escrow_bal_float*flt_earn_rate/12)*loan_count
        cost_to_service = (cts/12)*loan_count
        add_cts = additional_cts*del_loan_count
        int_on_escrow = (int_escrow*escrow_bal_float/12)*loan_count
        interest_lost = prepayment*service_fee*(int_lost_days/30)
        if month == 1:
            setup_costs = setup_cost*loan_count
        else:
            setup_costs = 0

        if np.any(interest_payment < .01):
            break
        begin_bal = (remaining_principal + principal_payment + prepayment)
        msr_cashflow = (serv_fee_cf + ancillary_fee + pandi_float + escrow_float) - (cost_to_service + add_cts + int_on_escrow + interest_lost + setup_costs)
        msr_cashflow_leverage = (((serv_fee_cf + ancillary_fee + pandi_float + escrow_float) - (cost_to_service + add_cts + int_on_escrow + interest_lost + setup_costs))/leverage) - (begin_bal*price*(financing_costs/12))
        disc_msr_cashflow = msr_cashflow / (1 + discount_rate / 12) ** month
        total_disc_msr_cashflow += disc_msr_cashflow
        wtd_cashflow = disc_msr_cashflow * month
        financing_cost = ((begin_bal*(financing_costs/12))*price)

        amortization_schedule.append([month, total_payment, monthly_payment, prepayment, interest_payment, principal_payment,
                                      remaining_principal, serv_fee_cf, ancillary_fee, pandi_float, escrow_float, cost_to_service, add_cts,
                                      int_on_escrow, interest_lost, setup_costs, begin_bal, msr_cashflow, msr_cashflow_leverage, disc_msr_cashflow, wtd_cashflow, financing_cost, total_disc_msr_cashflow])

        column_names = ['Month', 'total_payment', 'monthly_payment', 'Prepayment', 'Interest', 'Principal', 'End Balance',
                    'Service Fee', 'Ancillary', 'PandI Float', 'Escrow Float', 'CTS', 'Additional_CTS', 'Int Escrow', 'Int Lost', 'Setup Costs',
                    'Beginning Bal', 'Total Cash Flow', 'Total Cash Flow Leverage',
                    'Disc MSR Cashflow', 'Wtd_Cashflow', 'Financing_cost', 'Total Disc MSR Cashflow'
                    ]
    df = pd.DataFrame(amortization_schedule, columns = column_names)

    df['Market Value'] = total_disc_msr_cashflow - df['Total Disc MSR Cashflow']  # Calculate the new column

    delta_y = 0.01  # Change in yield for effective duration calculation, example: 0.01 for 1%
    effective_duration = effective_duration_calculation(principal, rate, term, prepayment_percentage, service_fee,
                                                        delta_y, discount_rate)


    #Exports Cash flows to csv file
    df.to_csv("C:/Users/colem/msr_cash_flows2.csv",
              columns=['Month', 'Beginning Bal', 'Principal', 'Interest', 'Prepayment', 'End Balance', 'Service Fee',
                       'Ancillary', 'PandI Float', 'Escrow Float', 'CTS', 'Additional_CTS', 'Setup Costs', 'Int Escrow', 'Int Lost',
                       'Total Cash Flow',  'Disc MSR Cashflow', 'Financing_cost', 'Market Value'], index=False, float_format='${:,.4f}'.format)

    print(df)


#Terminal Output Summary Table
    title = f"{'         PMSR Return Summary        '}"
    line =  f"{'------------------------------------'}"
    print(title)
    print(line)

    present_value = df['Disc MSR Cashflow'].sum()
    pv_format = f"Present value: ${present_value:,.0f}"
    print(pv_format)

    px = []
    loan_price = price * -principal
    px.append(loan_price)
    px.extend(df['Total Cash Flow'])
    irr = npf.irr(px)*12
    print("Price: {:.3%}".format(price))
    print("ROA: {:.2%}".format(irr))

    px2 = []
    px2.append(loan_price)
    px2.extend(df['Total Cash Flow Leverage'])
    irr2 = npf.irr(px2)*12
    print("ROE: {:.2%}".format(irr2))


    print(f"Effective Duration: {effective_duration:.3f}")
    line2 = f"{'------------------------------------'}"  # ADD THIS LINE
    print(line2)


    return amortization_schedule



def plot_loan_amortization_schedule(amortization_schedule):
    months = [entry[0] for entry in amortization_schedule]
    remaining_principal = [entry[6] for entry in amortization_schedule]
    fig, ax1 = plt.subplots(figsize=(10, 6))

    # Plot Remaining Principal on the left y-axis (ax1) as a line plot
    ax1.plot(months, remaining_principal, color='b', linewidth=2, label='Remaining Principal')
    ax1.set_xlabel('Months')
    ax1.set_ylabel('Remaining Principal ($)', color='b')
    ax1.tick_params(axis='y', labelcolor='b')
    plt.title('Loan Amortization Schedule with Remaining Principal and Market Value')
    fig.tight_layout()
    plt.show()
matplotlib.use('TkAgg')


amortization_schedule = loan_amortization_schedule(principal, rate, term, prepayment_percentage, service_fee)
plot_loan_amortization_schedule(amortization_schedule)
